{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport Layout from \"../components/layout\";\nimport SectionHead from \"../components/sectionhead\";\nimport styles from \"../styles/Calendar.module.css\";\nimport { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport Container from \"react-bootstrap/Container\";\nexport default function Calendar() {\n  const {\n    0: events,\n    1: setEvents\n  } = useState([]);\n  useEffect(() => {\n    function formatTime(date) {\n      var hours = date.getHours();\n      var minutes = date.getMinutes();\n      var ampm = hours >= 12 ? \"pm\" : \"am\";\n      hours = hours % 12;\n      hours = hours ? hours : 12;\n      minutes = minutes < 10 ? \"0\" + minutes : minutes;\n      var strTime = hours + \":\" + minutes + \" \" + ampm;\n      return strTime;\n    }\n\n    const fetchEvents = async () => {\n      const cal_id = \"pmtthq7beefrulnrjbd9nj9e5s@group.calendar.google.com\";\n      const api_key = \"AIzaSyDCdsXt9s_kxJp3SUjzzHng1Flgbao7jpc\";\n      var dateNow = new Date();\n      const result = await axios.get(\"https://www.googleapis.com/calendar/v3/calendars/\" + cal_id + \"/events\" + \"?key=\" + api_key, {\n        params: {\n          timeMin: dateNow.toISOString(),\n          timeMax: new Date(dateNow.setMonth(dateNow.getMonth() + 1)).toISOString(),\n          orderBy: \"startTime\",\n          singleEvents: true\n        }\n      }).then(response => {\n        var events = [];\n\n        if (response.data.items) {\n          const eventItems = response.data.items;\n          eventItems.forEach(e => {\n            var startTime = e.start.dateTime ? new Date(e.start.dateTime) : new Date(e.start.date);\n            var endTime = e.end.dateTime ? new Date(e.end.dateTime) : new Date(e.end.date);\n            var startDate = startTime.toDateString();\n            var endDate = endTime.toDateString();\n            var startTimeString = startTime && startTime.getHours() ? formatTime(startTime) : \"\";\n            var endTimeString = endTime && endTime.getHours() ? formatTime(endTime) : \"\";\n            var timeString = endTimeString ? `${startTimeString} - ${endTimeString}` : startTimeString;\n            var dateString = startDate == endDate ? `${startDate}, ${timeString}` : `${startDate}, ${startTimeString} - ${endDate}, ${endTimeString}`;\n            var locationString = e.location ? `${e.location}` : \"\";\n            events.push({\n              id: e.id,\n              htmlLink: e.htmlLink,\n              summary: e.summary,\n              locationString: locationString,\n              dateString: dateString\n            });\n          });\n        }\n\n        return events;\n      });\n      setEvents(result);\n    };\n\n    fetchEvents();\n  }, []);\n  return __jsx(Layout, null, __jsx(\"div\", {\n    className: \"content\"\n  }, __jsx(Container, {\n    fluid: true,\n    className: \"section\"\n  }, __jsx(SectionHead, {\n    title: \"Events_\",\n    top: true\n  }), __jsx(\"div\", {\n    id: \"events\"\n  }, events ? events.map(e => __jsx(\"a\", {\n    key: e.id,\n    href: e.htmlLink,\n    target: \"_blank\"\n  }, __jsx(\"div\", {\n    className: styles[\"event-card\"]\n  }, __jsx(\"h4\", null, e.summary), __jsx(\"h5\", null, e.locationString), __jsx(\"h6\", null, e.dateString)))) : null))));\n}","map":null,"metadata":{},"sourceType":"module"}