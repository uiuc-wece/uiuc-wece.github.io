{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from \"axios\";\n\nfunction getServerApiUrl() {\n  return \"localhost:3003/api\";\n}\n\nconst callFetchAsync = async (url, method, body, headers = {}) => {\n  try {\n    const options = {\n      headers: new Headers(_objectSpread({\n        \"Content-Type\": \"application/json\"\n      }, headers)),\n      body\n    };\n\n    if (body) {\n      options.body = JSON.stringify(body);\n    }\n\n    const response = await axios(_objectSpread({\n      method: method,\n      url: getServerApiUrl() + url,\n      withCredentials: true\n    }, options));\n    return await response.json();\n  } catch (err) {\n    return {\n      success: false,\n      data: err\n    };\n  }\n};\n\nconst postAsync = (url, body) => {\n  return callFetchAsync(url, \"POST\", body);\n};\n\nexport { postAsync };","map":{"version":3,"sources":["/Users/eugeniachen/git/weceweb/next-app/utils/server.js"],"names":["axios","getServerApiUrl","callFetchAsync","url","method","body","headers","options","Headers","JSON","stringify","response","withCredentials","json","err","success","data","postAsync"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,eAAT,GAA2B;AACzB,SAAO,oBAAP;AACD;;AAED,MAAMC,cAAc,GAAG,OAAOC,GAAP,EAAYC,MAAZ,EAAoBC,IAApB,EAA0BC,OAAO,GAAG,EAApC,KAA2C;AAChE,MAAI;AACF,UAAMC,OAAO,GAAG;AACdD,MAAAA,OAAO,EAAE,IAAIE,OAAJ;AACP,wBAAgB;AADT,SAEJF,OAFI,EADK;AAKdD,MAAAA;AALc,KAAhB;;AAQA,QAAIA,IAAJ,EAAU;AACRE,MAAAA,OAAO,CAACF,IAAR,GAAeI,IAAI,CAACC,SAAL,CAAeL,IAAf,CAAf;AACD;;AAED,UAAMM,QAAQ,GAAG,MAAMX,KAAK;AAC1BI,MAAAA,MAAM,EAAEA,MADkB;AAE1BD,MAAAA,GAAG,EAAEF,eAAe,KAAKE,GAFC;AAG1BS,MAAAA,eAAe,EAAE;AAHS,OAIvBL,OAJuB,EAA5B;AAOA,WAAO,MAAMI,QAAQ,CAACE,IAAT,EAAb;AACD,GArBD,CAqBE,OAAOC,GAAP,EAAY;AACZ,WAAO;AACLC,MAAAA,OAAO,EAAE,KADJ;AAELC,MAAAA,IAAI,EAAEF;AAFD,KAAP;AAID;AACF,CA5BD;;AA8BA,MAAMG,SAAS,GAAG,CAACd,GAAD,EAAME,IAAN,KAAe;AAC/B,SAAOH,cAAc,CAACC,GAAD,EAAM,MAAN,EAAcE,IAAd,CAArB;AACD,CAFD;;AAIA,SAASY,SAAT","sourcesContent":["import axios from \"axios\";\n\nfunction getServerApiUrl() {\n  return \"localhost:3003/api\";\n}\n\nconst callFetchAsync = async (url, method, body, headers = {}) => {\n  try {\n    const options = {\n      headers: new Headers({\n        \"Content-Type\": \"application/json\",\n        ...headers,\n      }),\n      body,\n    };\n\n    if (body) {\n      options.body = JSON.stringify(body);\n    }\n\n    const response = await axios({\n      method: method,\n      url: getServerApiUrl() + url,\n      withCredentials: true,\n      ...options,\n    });\n\n    return await response.json();\n  } catch (err) {\n    return {\n      success: false,\n      data: err,\n    };\n  }\n};\n\nconst postAsync = (url, body) => {\n  return callFetchAsync(url, \"POST\", body);\n};\n\nexport { postAsync };\n"]},"metadata":{},"sourceType":"module"}